import { Sticker, StickerTypes } from "wa-sticker-formatter";
import { downloadContentFromMessage } from "@whiskeysockets/baileys";
import { getBareNumber, sendRichReply, sendErrorReply } from "../utils.js";

export const mediaCommands = [
  {
    name: "sticker",
    description: "Cr√©er un sticker √† partir d'une image ou vid√©o",
    async execute(sock, msg, args) {
      const from = msg.key.remoteJid;
      const sender = msg.pushName || getBareNumber(msg.key.participant);

      try {
        const quoted = msg.message?.extendedTextMessage?.contextInfo?.quotedMessage || msg.message;
        const type = quoted.imageMessage ? "imageMessage" : quoted.videoMessage ? "videoMessage" : null;

        if (!type) {
          await sock.sendMessage(from, { text: "‚ö†Ô∏è R√©ponds ou envoie une image/vid√©o pour cr√©er un sticker." });
          return;
        }

        const stream = await downloadContentFromMessage(quoted[type], type.replace("Message", ""));
        let buffer = Buffer.from([]);
        for await (const chunk of stream) buffer = Buffer.concat([buffer, chunk]);

        const sticker = new Sticker(buffer, {
          pack: "RAIZEL XMD",
          author: sender,
          type: StickerTypes.FULL,
          quality: 70,
        });

        // R√©action emoji apr√®s cr√©ation du sticker
        await sock.sendMessage(from, { react: { text: "‚ú®", key: msg.key } });

        // Envoi du sticker
        await sock.sendMessage(from, { sticker: await sticker.build() }, { quoted: msg });

      } catch (e) {
        console.error("‚ùå Erreur sticker :", e);
        await sock.sendMessage(from, { text: "‚ùå Erreur cr√©ation sticker : " + e.message });
      }
    }
  },
  {
    name: "take",
    description: "R√©attribuer un sticker √† votre nom",
    async execute(sock, msg, args) {
      const from = msg.key.remoteJid;
      const sender = msg.pushName || getBareNumber(msg.key.participant);

      try {
        const quotedSticker = msg.message?.extendedTextMessage?.contextInfo?.quotedMessage?.stickerMessage;
        if (!quotedSticker) {
          await sock.sendMessage(from, { text: "‚ö†Ô∏è R√©ponds √† un sticker pour le r√©assigner." });
          return;
        }

        const stream = await downloadContentFromMessage(quotedSticker, "sticker");
        let buffer = Buffer.from([]);
        for await (const chunk of stream) buffer = Buffer.concat([buffer, chunk]);

        const sticker = new Sticker(buffer, {
          pack: "",
          author: sender,
          type: StickerTypes.FULL,
          quality: 80,
        });

        // R√©action emoji apr√®s ‚Äútake‚Äù
        await sock.sendMessage(from, { react: { text: "ü™Ñ", key: msg.key } });

        // Envoi du sticker
        await sock.sendMessage(from, { sticker: await sticker.build() }, { quoted: msg });

      } catch (e) {
        console.error("‚ùå Erreur take :", e);
        await sock.sendMessage(from, { text: "‚ùå Erreur take : " + e.message });
      }
    }
  },
  {
    name: "vv",
    description: "R√©cup√®re le m√©dia vue unique",
    async execute(sock, msg, args) {
      const from = msg.key.remoteJid;
      const sender = msg.pushName || getBareNumber(msg.key.participant);

      try {
        const quoted = msg.message?.extendedTextMessage?.contextInfo?.quotedMessage;
        if (!quoted) return await sendErrorReply(sock, from, msg, sender, "‚ö†Ô∏è R√©ponds √† une photo, vid√©o ou audio vue unique.");

        const innerMsg = quoted.viewOnceMessageV2?.message || quoted.viewOnceMessageV2Extension?.message || quoted;

        if (innerMsg.imageMessage) {
          const stream = await downloadContentFromMessage(innerMsg.imageMessage, "image");
          let buffer = Buffer.from([]);
          for await (const chunk of stream) buffer = Buffer.concat([buffer, chunk]);
          await sock.sendMessage(from, { image: buffer, caption: "üì∏ Vue unique d√©sactiv√©e" }, { quoted: msg });
          await sock.sendMessage(from, { react: { text: "üì∏", key: msg.key } });
          return;
        }

        if (innerMsg.videoMessage) {
          const stream = await downloadContentFromMessage(innerMsg.videoMessage, "video");
          let buffer = Buffer.from([]);
          for await (const chunk of stream) buffer = Buffer.concat([buffer, chunk]);
          await sock.sendMessage(from, { video: buffer, caption: "üé• Vue unique d√©sactiv√©e" }, { quoted: msg });
          await sock.sendMessage(from, { react: { text: "üé•", key: msg.key } });
          return;
        }

        if (innerMsg.audioMessage) {
          const stream = await downloadContentFromMessage(innerMsg.audioMessage, "audio");
          let buffer = Buffer.from([]);
          for await (const chunk of stream) buffer = Buffer.concat([buffer, chunk]);
          await sock.sendMessage(from, { audio: buffer, mimetype: "audio/mp4", ptt: innerMsg.audioMessage.ptt || false }, { quoted: msg });
          await sock.sendMessage(from, { react: { text: "üéµ", key: msg.key } });
          return;
        }

        await sendErrorReply(sock, from, msg, sender, "‚ùå Pas une photo, vid√©o ou audio vue unique.");
      } catch (e) {
        console.error("‚ùå Erreur vv :", e);
        await sendErrorReply(sock, from, msg, sender, "‚ùå Erreur vv : " + e.message);
      }
    }
  },
  {
    name: "photo",
    description: "Transforme un sticker en photo",
    async execute(sock, msg, args) {
      const from = msg.key.remoteJid;
      const sender = msg.pushName || getBareNumber(msg.key.participant);

      try {
        const quoted = msg.message?.extendedTextMessage?.contextInfo?.quotedMessage?.stickerMessage;
        if (!quoted) return await sendErrorReply(sock, from, msg, sender, "‚ö†Ô∏è R√©ponds √† un sticker pour le transformer en photo.");

        const stream = await downloadContentFromMessage(quoted, "sticker");
        let buffer = Buffer.from([]);
        for await (const chunk of stream) buffer = Buffer.concat([buffer, chunk]);

        await sendRichReply(sock, from, msg, [sender], "‚úÖ Sticker converti en photo !");
        await sock.sendMessage(from, { image: buffer, caption: "üñºÔ∏è Sticker converti en photo" }, { quoted: msg });
        await sock.sendMessage(from, { react: { text: "üñºÔ∏è", key: msg.key } });

      } catch (e) {
        console.error("‚ùå Erreur photo :", e);
        await sendErrorReply(sock, from, msg, sender, "‚ùå Erreur conversion sticker ‚Üí photo : " + e.message);
      }
    }
  }
];

export default mediaCommands;